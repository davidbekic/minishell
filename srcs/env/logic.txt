INIT_LIST
1. Initialize a new linked list t_env with the current env variables inside.
2. Create head, which is a pointer to the first struct element, thus a pointer to t_env.
3. While (main_env[i] != NULL), run t_env *lstnew(char *key, char *value), which will be called 
   with lstnew(find_key(), find_value().
4. Point the previous element to the element returned by lstnew.


EXPORT
1. Take export argument as input and split them into key and value(ft_split('='), but careful if there
  are more '=' in argument. Same if I use it in lst_new.
2. Iterate through list and do str_cmps between arg and all key-values.
3. If (match) --> replace. Else lstnew()


ERROR MGMT
If there are 30 ENV variables, there will be at least 90 mallocs. 
If a malloc fails at 85th malloc, everything before must be freed.
Also, if something else was malloced before(outside this module), that must be freed as well.

Discuss with Israel if we should have a struct in the beginning so we can free_all() anywhere in code,
or if we should have a return() system, so that if we return a certain int, the main will know to free.
Perhaps we should have both. If for instance a fork has malloc failure, we need to return back main to free
the main variables no? Or perhaps that doesn't consitute a requirement for exiting the entire Shell?
